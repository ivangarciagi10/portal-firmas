// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?  // Solo para email/contraseña
  role      Role     @default(CLIENT)
  projects  Project[] @relation("ProjectOwner")
  signatures Signature[]
  // NextAuth
  accounts  Account[]
  sessions  Session[]
}

enum Role {
  ADMIN
  CLIENT
  GUEST
}

model Project {
  id                String     @id @default(cuid())
  name              String
  type              String
  clientCompany     String
  keyUser           String
  startDate         DateTime
  plannedEndDate    DateTime
  realEndDate       DateTime?
  scopeObjectives   String
  comments          String?
  owner             User      @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId           String
  signatures        Signature[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Signature {
  id         String   @id @default(cuid())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  name       String   // Nombre de quien firma (puede ser invitado)
  role       String   // Cargo o relación (ej: Cliente, Subdirector)
  signedAt   DateTime?
  email      String?
  token      String?  @unique  // Para invitados, enlace único
  comentario String?
  motivoRechazo String?
  estado     EstadoFirma @default(PENDING)
  // Firma oficial
  nombreCompleto String?
  signatureImage String?  // Base64 de la imagen de la firma
  // Cuestionario de satisfacción
  calificacionGeneral Int?
  calidadDesarrollo   Int?
  comunicacion        Int?
  cumplimientoTiempos Int?
  recomendacion       Int?
  feedback            String?
}

enum EstadoFirma {
  ACCEPTED
  REJECTED
  PENDING
}

// Modelos requeridos por NextAuth
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
